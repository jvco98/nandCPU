/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // X-Input -- Check zx condition
    Mux16 (a=x, b[0..15]=false, sel=zx, out=xPreNot);

    // Y-Input -- Check zy condition
    Mux16 (a=y, b[0..15]=false, sel=zy, out=yPreNot);

    // X-Input -- Check nx condition
    Not16 (in=xPreNot, out=xInvertedPreNot);
    Mux16 (a=xPreNot, b=xInvertedPreNot, sel=nx, out=xPreF);

    // Y-Input -- Check ny condition
    Not16 (in=yPreNot, out=yInvertedPreNot);
    Mux16 (a=yPreNot, b=yInvertedPreNot, sel=ny, out=yPreF);

    // Store AND / OR arithmetic
    And16 (a=xPreF, b=yPreF, out=AndInF);
    Add16 (a=xPreF, b=yPreF, out=AddInF);

    // X,Y Input -- Check f condition
    Mux16 (a=AndInF, b=AddInF, sel=f, out=xyPreNo);

    // X,Y Input -- Check no condition
    Not16 (in=xyPreNo, out=xyNotPreNo);
    Mux16 (a=xyPreNo,
           b=xyNotPreNo, 
           sel=no, 
           out=out, 
	   out[0..7]=lo,
	   out[8..15]=hi,
           out[15]=ng);    // Set ng flag

    // Check if output == 0
    Or8Way (in=lo, out=lsbOr);
    Or8Way (in=hi, out=msbOr); 
    Or (a=lsbOr, b=msbOr, out=flag);
    
    // Set zr flag
    Nand (a=flag, b=flag, out=zr);

}